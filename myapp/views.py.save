from flask import Blueprint, render_template, request, url_for, redirect, session, g, flash
from functools import wraps
from myapp.database import *

import secrets


views = Blueprint('views', __name__, static_folder='static', template_folder='templates')

def login_required(f):
    @wraps(f)
    def wrapped_view(**kwargs):
        if "user" not in session:
            return redirect(url_for('views.login'))

        user = User.query.get(session["user"])
        if not user:
            session.clear()
            return redirect(url_for('views.login'))
        g.user = user

        return f( **kwargs)

    return wrapped_view


@views.route('/login',methods=["GET", "POST"])
def login():
    if "user" in session:
        return redirect(url_for('views.upstreams'))

    auth = request.authorization
    if not auth:
        return ('Unauthorized', 401, {
            'WWW-Authenticate': 'Basic realm="Login Required"'
        })

    user = User.query.filter_by(username=request.authorization.username).first()
    if user:
        if user.check_password(request.authorization.password):
            session["user"] = user.username
            return redirect(url_for("views.upstreams"))
        else:
           return ('Unauthorized', 401, {
                'WWW-Authenticate': 'Basic realm="Invalid Password for the user!"'
            })

    new_user = User(username=request.authorization.username, password='meh')
    new_user.set_password(request.authorization.password)
    db.session.add(new_user)
    db.session.commit()

    session["user"] = new_user.username
    return redirect(url_for("views.upstreams"))


@views.route('/',methods=['GET', 'POST'])
@login_required
def upstreams():
    if request.method == 'POST':
        domain = request.form['domain']
        if Upstream.query.filter_by(domain=domain,user=g.user).first():
            flash('Upstream already exists', 'error')
        else:
            new_upstream = Upstream(
                user=g.user,
                domain=domain,
                secret=secrets.token_urlsafe(36)
            )
            db.session.add(new_upstream)
            db.session.commit()
            flash('Upstream added successfully', 'success')

    upstreams = g.user.upstreams
    return render_template('upstreams.html', upstreams=upstreams)

@views.post('/delete_upstream/<domain>')
@login_required
def delete_upstream(domain):
    upstream = Upstream.query.filter_by(domain=domain, user=g.user).first_or_404()

    Domain.query.filter_by(upstream_domain=domain).delete()
    db.session.delete(upstream)
    db.session.commit()

    flash('Upstream and its domains deleted successfully', 'success')
    return redirect(url_for('views.upstreams'))

@views.get('/logout')
def logout():
    session.clear()
    return redirect(url_for('views.login'))

@views.route('/upstream/<upstream_domain>',methods=['GET', 'POST'])
@login_required
def domains(upstream_domain):
    upstream = Upstream.query.filter_by(domain=upstream_domain, user=g.user).first_or_404()

    if request.method == 'POST':
        domain = request.form['domain']
        if Upstream.query.filter_by(domain=domain,upstream=upstream).first():
            flash('Domain already exists in the upstream', 'error')
        else:
            new_domain = Domain(
                upstream=upstream,
                domain=domain,
            )
            db.session.add(new_domain)
            db.session.commit()
            flash('Domain added successfully', 'success')

    domains = upstream.domains
    return render_template('domains.html', upstream=upstream, domains=domains)

@views.post('/delete_domain/<domain_id>')
@login_required
def delete_upst(domain_id):
    domain = Domain.query.get_or_404(domain_id)

    if domain.upstream.user != g.user:
        flash('Unauthorized to delete this domain.', 'error')
        return redirect(url_for('views.domains'))

    db.session.delete(domain)
    db.session.commit()

    flash('Domain deleted successfully.', 'success')
    return redirect(url_for('views.domains'))
